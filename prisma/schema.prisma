// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phone       String?
  roomNumber  String?  @map("room_number")
  role        Role     @default(CUSTOMER)
  password    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  orders      Order[]

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  products  Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  stockQuantity Int    @default(0) @map("stock_quantity")
  imageUrl    String?  @map("image_url")
  isAvailable Boolean  @default(true) @map("is_available")
  categoryId  String   @map("category_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique @map("order_number") // Human-readable like "ORD-001"
  
  // Customer Info  
  userId        String        @map("user_id")
  customerName  String        @map("customer_name")  // Store at time of order
  customerEmail String        @map("customer_email") // Store at time of order
  
  // Order Status
  status        OrderStatus   @default(PENDING)
  
  // Payment Info
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentPin    String?       @map("payment_pin") // Last 4 digits of UPI transaction
  
  // Delivery Info  
  deliveryMethod DeliveryMethod @map("delivery_method")
  roomNumber    String?       @map("room_number") // For delivery orders
  
  // Pricing
  subtotal      Float
  deliveryFee   Float         @default(0) @map("delivery_fee")
  totalAmount   Float         @map("total_amount")
  
  // Timestamps
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  completedAt   DateTime?     @map("completed_at")
  
  // Admin notes
  adminNotes    String?       @map("admin_notes")

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  
  // Keep existing Payment relation for backwards compatibility (optional)
  payment       Payment?

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  productId   String  @map("product_id")
  
  // Store product details at time of order
  productName String  @map("product_name")
  price       Float   // Price at time of order
  quantity    Int
  subtotal    Float   // price * quantity

  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Keep existing Payment model for backwards compatibility
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique @map("order_id")
  amount        Float
  paymentMethod PaymentMethod @map("payment_method")
  paymentProof  String?       @map("payment_proof") // For UPI screenshot URL
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING      // New: Order being prepared
  READY          // New: Ready for pickup/delivery
  OUT_FOR_DELIVERY // New: On the way (delivery only)
  DELIVERED      // New: Delivered to room
  COMPLETED      // Existing: Final state
  CANCELLED      // Existing
}

enum PaymentMethod {
  UPI
  COD
}

enum PaymentStatus {
  PENDING
  VERIFIED
  FAILED
  COMPLETED     // New: Payment fully processed
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}