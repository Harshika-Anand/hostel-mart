generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  phone      String?
  roomNumber String?  @map("room_number")
  role       Role     @default(CUSTOMER)
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  orders     Order[]

  @@map("users")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  price         Float
  stockQuantity Int         @default(0) @map("stock_quantity")
  imageUrl      String?     @map("image_url")
  isAvailable   Boolean     @default(true) @map("is_available")
  categoryId    String      @map("category_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id             String         @id @default(cuid())
  orderNumber    String         @unique @map("order_number")
  userId         String         @map("user_id")
  customerName   String         @map("customer_name")
  customerEmail  String         @map("customer_email")
  status         OrderStatus    @default(PENDING)
  paymentMethod  PaymentMethod  @map("payment_method")
  paymentStatus  PaymentStatus  @default(PENDING) @map("payment_status")
  paymentPin     String?        @map("payment_pin")
  deliveryMethod DeliveryMethod @map("delivery_method")
  roomNumber     String?        @map("room_number")
  subtotal       Float
  deliveryFee    Float          @default(0) @map("delivery_fee")
  totalAmount    Float          @map("total_amount")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  completedAt    DateTime?      @map("completed_at")
  adminNotes     String?        @map("admin_notes")
  confirmedAt    DateTime?      @map("confirmed_at")
  readyAt        DateTime?      @map("ready_at")
  orderItems     OrderItem[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  productId   String  @map("product_id")
  productName String  @map("product_name")
  price       Float
  quantity    Int
  subtotal    Float
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  UPI
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}
